@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap');

body {
  margin: 0;
  font-family: 'Inter', sans-serif;
  text-align: center;
  background: rgba(255, 255, 255, 0.6);
  color: #1e1e1e;
}

h1 {
  position: fixed;
  top: 20px;
  left: 50%;
  transform: translateX(-50%);
  margin: 0;
  padding: 0.4rem 1rem;
  font-size: 1.25rem;
  font-weight: 600;
  color: #1a1a1a;
  background: rgba(255, 255, 255, 0.45);
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: 12px;
  backdrop-filter: blur(10px);
  -webkit-backdrop-filter: blur(10px);
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
  z-index: 1000;
  animation: fadeInDown 0.6s ease-out;
}

/* Optional subtitle */
h2 {
  margin: 0;
  font-size: 1rem;
  font-weight: 400;
  color: #666;
  display: none;
}

#map {
  width: 100vw;
  height: 100vh;
  margin: 0;
  border-radius: 8px;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
}

.marker {
  font-size: 24px;
  width: 32px;
  height: 32px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
}

/* Smooth fade animation for header */
@keyframes fadeInDown {
  from {
    opacity: 0;
    transform: translateX(-50%) translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateX(-50%) translateY(0);
  }
}

.popup {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 90%;
  max-width: 700px;
  background: rgba(255, 255, 255, 0.55);
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: 16px;
  backdrop-filter: blur(12px);
  -webkit-backdrop-filter: blur(12px);
  box-shadow: 0 8px 24px rgba(0, 0, 0, 0.2);
  z-index: 2000;
  padding: 1.5rem;
  animation: fadeIn 0.7s ease;
}

.popup-content {
  text-align: left;
  font-size: 0.95rem;
  color: #1a1a1a;
}

.popup h2 {
  margin-top: 0;
  font-size: 1.2rem;
  font-weight: 600;
  margin-bottom: 0.5rem;
}

.popup p {
  margin: 0.5rem 0;
  line-height: 1.5;
}

.close-btn {
  position: absolute;
  top: 8px;
  right: 12px;
  background: transparent;
  border: none;
  font-size: 1.2rem;
  color: #444;
  cursor: pointer;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translate(-50%, -60%);
  }
  to {
    opacity: 1;
    transform: translate(-50%, -50%);
  }
}


Working js with list
// Firebase config (replace with yours if different)
const firebaseConfig = {
  apiKey: "AIzaSyAB23uWG6QXCJypFWI3k3g052Zkkuke8vE",
  authDomain: "pinningyoudown.firebaseapp.com",
  projectId: "pinningyoudown",
  storageBucket: "pinningyoudown.appspot.com",
  messagingSenderId: "112114120917",
  appId: "1:112114120917:web:e7e2362968aa4a9b5cca5c",
  measurementId: "G-2VEVMWB53P"
};

// Initialize Firebase
firebase.initializeApp(firebaseConfig);
const db = firebase.firestore();

// Initialize Mapbox
mapboxgl.accessToken = 'pk.eyJ1IjoicmlhbmFtIiwiYSI6ImNtOG85dThvZzAwZWUybHM4Y3kxc2NxMXkifQ.V8ORue4RIHI98JS4ZYipXQ';
const map = new mapboxgl.Map({
  container: 'map',
  style: 'mapbox://styles/mapbox/outdoors-v12',
  center: [78.9629, 20.5937], // Centered on India
  zoom: 2
});

// Create a marker element with popup and right-click delete
function createMarker(docId, lngLat, text) {
  const el = document.createElement('div');
  el.className = 'marker';
  el.title = text;
  el.textContent = 'ðŸ“';

  const popup = new mapboxgl.Popup({ offset: 25 }).setHTML(`<h3>${text}</h3>`);

  const marker = new mapboxgl.Marker(el)
    .setLngLat(lngLat)
    .setPopup(popup)
    .addTo(map);

  // Click to toggle popup (important for mobile)
  el.addEventListener('click', () => {
    marker.togglePopup();
  });

  //  Right-click to delete
  el.addEventListener('contextmenu', (e) => {
    e.preventDefault();
    if (confirm("Delete this memory?")) {
      db.collection("pins").doc(docId).delete().then(() => {
        el.remove();
      });
    }
  });
}

// Load all existing pins
db.collection("pins").get().then((querySnapshot) => {
  querySnapshot.forEach((doc) => {
    const data = doc.data();
    createMarker(doc.id, [data.lng, data.lat], data.text);
  });
});

// Add new pins on map click
map.on('click', (e) => {
  const lngLat = e.lngLat;
  const text = prompt("caption it!");

  if (text) {
    db.collection("pins").add({
      lng: lngLat.lng,
      lat: lngLat.lat,
      text: text
    }).then((docRef) => {
      createMarker(docRef.id, [lngLat.lng, lngLat.lat], text);
    });
  }
});



const memoryToggle = document.getElementById("memoryToggle");
const memoryPanel = document.getElementById("memoryPanel");
const closePanel = document.getElementById("closePanel");
const memoryList = document.getElementById("memoryList");
let allMarkers = []; // store references to markers

memoryToggle.addEventListener("click", () => {
  memoryPanel.classList.add("open");
});

closePanel.addEventListener("click", () => {
  memoryPanel.classList.remove("open");
});

// Helper: Get readable place name using reverse geocoding
async function getPlaceName(lat, lng) {
  const response = await fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${lng},${lat}.json?access_token=${mapboxgl.accessToken}`);
  const data = await response.json();
  return data.features[0]?.place_name || "Unknown place";
}

function createMarker(docId, lngLat, text) {
  const el = document.createElement('div');
  el.className = 'marker';
  el.title = text;
  el.textContent = 'ðŸ“';

  const popup = new mapboxgl.Popup({ offset: 25 }).setHTML(`<h3>${text}</h3>`);

  const marker = new mapboxgl.Marker(el)
    .setLngLat(lngLat)
    .setPopup(popup)
    .addTo(map);

  el.addEventListener('contextmenu', (e) => {
    e.preventDefault();
    if (confirm("Delete this memory?")) {
      db.collection("pins").doc(docId).delete().then(() => {
        el.remove();
        loadMemoryList(); // refresh panel
      });
    }
  });

  el.addEventListener('click', () => {
    marker.togglePopup();
  });

  allMarkers.push({ docId, marker, lngLat, text }); // store marker

  return marker;
}

// Load & display all memories
function loadMemoryList() {
  memoryList.innerHTML = "";
  allMarkers = [];

  db.collection("pins").get().then(async (querySnapshot) => {
    const promises = [];

    querySnapshot.forEach((doc) => {
      const data = doc.data();
      const lngLat = [data.lng, data.lat];
      const caption = data.text;
      const customName = data.placeName || null;

      const marker = createMarker(doc.id, lngLat, caption);

      promises.push(
        getPlaceName(data.lat, data.lng).then(placeName => {
          const displayName = customName || placeName;

          const item = document.createElement('div');
          item.className = 'memory-item';

          item.innerHTML = `
            <div class="memory-place" contenteditable="true" data-doc="${doc.id}">${displayName}</div>
            <div class="memory-caption">${caption}</div>
          `;

          // On click, zoom to marker
          item.addEventListener('click', () => {
            map.flyTo({ center: lngLat, zoom: 8 });
            marker.togglePopup();
          });

          // On edit (blur), save to Firestore
          const placeDiv = item.querySelector(".memory-place");
          placeDiv.addEventListener("blur", () => {
            const newName = placeDiv.textContent.trim();
            db.collection("pins").doc(doc.id).update({ placeName: newName });
          });

          memoryList.appendChild(item);
        })
      );
    });

    await Promise.all(promises);
  });
}



